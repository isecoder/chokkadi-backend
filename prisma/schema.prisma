generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  role_id   Int     @id @default(autoincrement())
  role_name String
  Users     Users[]
}

model Users {
  user_id          Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  phone            String
  password         String?
  role_id          Int
  createdAt        DateTime          @default(now())
  auth_provider    String

  DonationRecords  DonationRecords[]
  NewsUpdates      NewsUpdates[]
  Orders           Orders[]
  Role             Roles             @relation(fields: [role_id], references: [role_id])

  // Add relations for created_by and modified_by in the Images model
  CreatedImages    Images[]          @relation("createdByRelation")
  ModifiedImages   Images[]          @relation("modifiedByRelation")
}

model Images {
  image_id      Int       @id @default(autoincrement())
  alt_text      String?
  file_path     String
  created_by    Int       // Relation to Users
  created_at    DateTime  @default(now())
  modified_by   Int?      // Optional relation to Users
  modified_at   DateTime  @updatedAt

  // Relations to Users for created_by and modified_by
  createdBy     Users     @relation("createdByRelation", fields: [created_by], references: [user_id])
  modifiedBy    Users?    @relation("modifiedByRelation", fields: [modified_by], references: [user_id])
}


model Sevas {
  seva_id             Int            @id @default(autoincrement())
  name                String
  description         String
  name_kannada        String
  description_kannada String
  base_price          Decimal
  OrderDetails        OrderDetails[]

  // Define the relation to SevaForm with the relation name "sevaForms"
  sevaForms           SevaForm[]     @relation("SevaForms")
}

model Orders {
  order_id        Int              @id @default(autoincrement())
  user_id         Int
  order_date      DateTime
  status          String
  total_amount    Decimal
  Acknowledgments Acknowledgments?
  OrderDetails    OrderDetails[]
  User            Users            @relation(fields: [user_id], references: [user_id])
  Receipts        Receipts?
}

model OrderDetails {
  order_detail_id Int     @id @default(autoincrement())
  order_id        Int
  seva_id         Int
  quantity        Int
  price           Decimal
  Orders          Orders  @relation(fields: [order_id], references: [order_id])
  Sevas           Sevas   @relation(fields: [seva_id], references: [seva_id])
}

model Receipts {
  receipt_id          Int               @id @default(autoincrement())
  order_id            Int               @unique
  receipt_number      String
  amount_paid         Decimal
  payment_date        DateTime
  payment_status      String
  razorpay_payment_id String?
  DonationRecords     DonationRecords[]
  Payments            Payments[]
  Orders              Orders            @relation(fields: [order_id], references: [order_id])
}

model Acknowledgments {
  acknowledgment_id     Int      @id @default(autoincrement())
  order_id              Int      @unique
  acknowledgment_number String
  acknowledged_date     DateTime
  message               String?
  Orders                Orders   @relation(fields: [order_id], references: [order_id])
}

model DonationRecords {
  donation_record_id Int       @id @default(autoincrement())
  user_id            Int
  donation_amount    Decimal
  donation_date      DateTime
  certificate_number String
  tax_deductible     Boolean
  receipt_id         Int?
  Receipts           Receipts? @relation(fields: [receipt_id], references: [receipt_id])
  User               Users     @relation(fields: [user_id], references: [user_id])
}

model Payments {
  payment_id          Int      @id @default(autoincrement())
  receipt_id          Int
  amount              Decimal
  payment_date        DateTime
  payment_status      String
  razorpay_payment_id String?
  Receipts            Receipts @relation(fields: [receipt_id], references: [receipt_id])
}

model Contacts {
  contact_id  Int    @id @default(autoincrement())
  name        String
  address     String
  city        String
  state       String
  postal_code String
  country     String
  phone       String
}

model NewsUpdates {
  news_id          Int      @id @default(autoincrement())
  title            String
  content          String
  title_kannada    String
  content_kannada  String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  created_by       Int?
  User             Users?   @relation(fields: [created_by], references: [user_id])
}

model SevaForm {
  id                     Int       @id @default(autoincrement())
  name                   String
  nakshathra             String
  rashi                  String
  gotra                  String?   // Optional field
  mobileNumber           String
  mobileNumberConfirmation String
  date                   DateTime
  sevaId                 Int

  createdAt              DateTime @default(now())

  // Define the relation to Sevas, using the same relation name
  seva                   Sevas     @relation("SevaForms", fields: [sevaId], references: [seva_id])
}